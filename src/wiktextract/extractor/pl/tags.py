from .models import WordEntry

# Help:Abbreviations used in Wiktionary
# https://pl.wiktionary.org/wiki/Pomoc:Skróty_używane_w_Wikisłowniku
# Category:Shortcut templates
# https://pl.wiktionary.org/wiki/Kategoria:Szablony_skrótów
TAGS = {
    "abl.": "ablative",
    # "akust.": "",
    "aor.": "aorist",
    "bezok.": "infinitive",
    "bezosob.": "impersonal",
    "bibl.": "Biblical",
    "blm": "no-plural",
    "blp": "no-singulative",
    "Bm": "Bokmål",
    "bośn.": "Bosnian",
    "brytań.": "British",
    "bułg.": "Bulgarian",
    "bwr.": "Bavarian",
    "chiń.": "Chinese",
    "chorw.": "Croatian",
    "cs.": "Church-Slavonic",
    "czes.": "Czech",
    "depr.": "depreciative",
    "dial.": "dialectal",
    "dk": "perfective",
    "dosł.": "literally",
    "du": "dual",
    "dysfem.": "dysphemism",
    "dysk.": "discourse",
    "dźwięk.": "onomatopoeic",
    "ekspr.": "expressively",
    "el.": "Greek",
    "erud.": "eruditely",
    "eufem.": "euphemistic",
    "ew.": "alternative",
    "ezot.": "esoteric",
    "franc.": "French",
    "galic.": "Galician",
    "germ.": "Germanic",
    "gr.": "Ancient-Greek",
    "grec.": "Ancient-Greek",
    "grub.": "offensive",
    "grzecz.": "polite",
    "gw.": "dialectal",
    "hebr.": "Hebrew",
    "hin.": "Hindi",
    "hiszp.": "Spanish",
    "honor.": "honorific",
    "ims.": "participle",
    "infant.": "childish",
    "irl.": "Irish",
    "iron.": "ironic",
    "iterat.": "iterative",
    "jap.": "Japanese",
    "kanad.": "Canadian-English",
    "kanad. franc.": "Canadian-French",
    "kant.": "Cantonese",
    "katal.": "Catalan",
    "kathar.": "Katharevousa",
    "kaz.": "Kazakh",
    "kor.": "Korean",
    "kor. płd.": "South-Korean",
    "kor. płn.": "North-Korean",
    "korn.": "Cornish",
    "książk.": "literary",
    "lekcew.": "pejorative",
    "lewant. arab.": "Levantine-Arabic",
    "libij. arab.": "Libyan-Arabic",
    "licz.": "numeral",
    "licz. gł.": "cardinal",
    "licz. porz.": "ordinal",
    "litew.": "Lithuanian",
    "lm": "plural",
    "lm m": ["plural", "masculine"],
    "lm nm": ["plural", "nonvirile"],
    "lp": "singular",
    "lud.": "vernacular",
    "lwow.": ["Lviv", "dialectal"],
    "łac.": "Latin",
    "łac.kośc.": ["Ecclesiastical", "Latin"],
    "łot.": "Latvian",
    # Category:Acronym templates - grammar
    # https://pl.wiktionary.org/wiki/Kategoria:Szablony_skrótów_-_gramatyka
    "m": "masculine",
    # gender types in POS line
    "męski": "masculine",
    "męskozwierzęcy": ["masculine", "animate"],
    "męskorzeczowy": ["masculine", "inanimate"],
    "niepoliczalny": "uncountable",
    "nieżywotny": "inanimate",
    "nijaki": "neuter",
    "policzalny": "countable",
    "przechodni": "transitive",
    "żeński": "feminine",
    "żywotny": "animate",
    # sound tags
    "bryt. (RP)": ["British", "Received-Pronunciation"],
    "amer.": "US",
}

TOPICS = {
    "adm.": "administration",
    "agrot.": "agrotechnology",
    "alch.": "alchemy",
    "anat.": "anatomy",
    "antrop.": "anthropology",
    "arachn.": "arachnology",
    "archit.": "architecture",
    "archeol.": "archeology",
    "astr.": "astronomy",
    "astrol.": "astrology",
    "astronaut.": "astronautics",
    "bank.": "banking",
    # "bibliot.": "",
    "biochem.": "biochemistry",
    "biol.": "biology",
    # "biur.": "",
    "bot.": "botany",
    "bud.": "construction",
    "ceram.": "ceramics",
    "chem.": "chemistry",
    "choreogr.": "choreography",
    "cukiernictwo.": "confectionery",
    "cybern.": "cybernetics",
    # "daw.": "",
    "demogr.": "demography",
    "dendr.": "dendrology",
    "drewn.": "woodworking",
    "druk.": "printing",
    "dypl.": "diplomacy",
    "eduk.": "education",
    "ekol.": "ecology",
    "ekon.": "economics",
    "elektr.": "electricity",
    "elektron.": "electronics",
    "enol.": "oenology",
    "ent.": "entomology",
    "etn.": "ethnography",
    "etym.": "etymology",
    "fant.": "speculative-fiction",
    "farm.": "pharmacology",
    "felinol.": "felinology",
    "filatel.": "philately",
    "film.": "film",
    "filoz.": "philosophy",
    "finans.": "finance",
    "fitopatol.": "phytopathology",
    "fiz.": "physics",
    "fizj.": "physiology",
    "flis.": "timber-rafting",
    "folk.": "folklore",
    "fonet.": "phonetics",
    "form. słow.": "word-forming",
    "fot.": "photography",
    "fryzj.": "hairdressing",
    "garb.": "tanning",
    "gastr.": "gastronomy",
    "genet.": "genetics",
    "geod.": "geodesy",
    "geofiz.": "geophysics",
    "geogr.": "geography",
    "geol.": "geology",
    "geom.": "geometry",
    "gend. st.": "gender-studies",
    "ginek.": "gynaecology",
    "górn.": "mining",
    "gram.": "grammar",
    "gry komp.": "computer games",
    "hand.": "trade",
    "harc.": "scouting",
    "herald.": "heraldry",
    "herp.": "herpetology",
    "hig.": "hygienic",
    "hipol.": "hippology",
    "hist.": "history",
    "hotel.": "hotel-industry",
    "hutn.": "metallurgy",
    "hydraul.": "hydraulics",
    "hydrol.": "hydrology",
    "icht.": "ichthyology",
    "ikonogr.": "iconography",
    "inform.": "computer-science",
    "jedn. miar.": "units-of-measure",
    "jedn. monet.": "units-of-monetary",
    "jeźdz.": "equestrianism",
    "jęz.": "linguistics",
    "jubil.": "jewelry",
    "kartogr.": "cartography",
    "kolej.": "railways",
    "konserwat.": "conservation",
    "kosmet.": "cosmetics",
    "kośc.": "ecclesiastical",
    "kraw.": "tailoring",
    "krym.": "criminology",
    "kryptogr.": "cryptography",
    "krystal.": "crystallography",
    "księg.": "accounting",
    "kulin.": "culinary",
    "kult.": "cultural-studies",
    "kynol.": "cynology",
    "leśn.": "forestry",
    "liter.": "literature",
    "log.": "logic",
    "lotn.": "aviation",
    "łow.": "hunting",
}


def translate_raw_tags(data: WordEntry) -> None:
    raw_tags = []
    for raw_tag in data.raw_tags:
        if raw_tag in TAGS and hasattr(data, "tags"):
            tag = TAGS[raw_tag]
            if isinstance(tag, str):
                data.tags.append(tag)
            elif isinstance(tag, list):
                data.tags.extend(tag)
        elif raw_tag in TOPICS and hasattr(data, "topics"):
            topic = TOPICS[raw_tag]
            if isinstance(topic, str):
                data.topics.append(topic)
            elif isinstance(topic, list):
                data.topics.extend(topic)
        else:
            raw_tags.append(raw_tag)
    data.raw_tags = raw_tags
